//ES6新增了内存管理优化机制，JS引擎在满足条件时可以重用栈帧
//尾调用，即外部函数的返回值是一个内部函数的返回值
function out(){
    function inner(){
        return 0;
    }
    return inner();
}
//优化前，每次函数的嵌套都会入栈，直至操作完成再一个个出栈
//优化后，每次入栈时都会出栈上一个嵌套（如果没什么影响的话），这样无论有多少嵌套都只有一个函数入栈

//尾调用优化的条件
/*
1.外部栈没有存在必要了
2.代码在严格模式下运行
3.外部函数的返回值是对尾调用函数的“调用”（不是运行结果）
4.尾调用函数返回后没有额外逻辑（比如再给它一个toString()之类的）
5.尾调用函数不能是闭包
*/

//JS引擎并不关系尾调用函数的具体值
//这项优化在递归中效果明显

//JS中有可以操作数据值的操作符，它们可以用于各种值
//而在用于对象时，通常调用valueOf()或toString()




//一元操作符：只操作一个值
//和C语言一样的，有++、--、同时也有前缀版和后缀版
//在操作时都会试图进行类型转换，变为数值类型
var a = 0;
console.log(a,++a,--a);//0 1 0
//一元加减符，除了有常规意义的正负号外，放在非数值前面还会发生类型转换
var a = "blue";
console.log(+a);//NaN




//位操作符：作用于数值底层操作，也就是以比特（位）单位操作数值
//JS的数值都是以64位存储，但是位操作是先转换数值到32位，再将结果转换到64位，这会导致NaN和Infinity在位操作中被当成0
//JS的整数都是有符号整数，前31位表示数值，32位表示正负，0为正，1为负，其中负整数以补码方式存储
//对非数值进行位操作时，会进行类型转换Number()

//按位非、与、或、异或(~、&、|、^)
//分别对两数的对应二进制位进行操作，其中异或是"相同则0，不同则1"

//左移（<<）：所有位左移指定位数，右端空位以0填补，符号位保留
var a =  3;//0011
console.log(a<<1);//0110 6

//有符号右移（>>）：所有位数右移，符号不变，左端空位以符号位补齐
//无符号右移（>>>）：所有位数右移，符号位一起移动，左端空位以0补齐




//布尔操作符

//逻辑非（!）
//始终返回布尔值，会先将操作数转换为布尔值再取反
//按照处理流程思考即可，先Boolean()再取反

//逻辑与（&&）
//可作用于任何操作数，但返回值不一定是布尔值
//第一个是对象，返回第二个
//第二个是对象，则当第一个是true时返回对象
//两个都是对象，返回第二个对象
//存在null、NaN、undefined则返回它们
//逻辑与操作是短路操作符，第一个操作数是false则第二个操作数不会运算

//逻辑或（||）
//也不一定返回布尔值
//第一个是对象，返回第一个
//第一个为false，返回第二个
//两个都是对象，返回第一个对象
//两个都是null、NaN、undefined则返回它们
//短路操作符，第一个是true则第二个不会运算
var a = 0 || "str" || false//利用逻辑或的短路特性，给变量添加备选值




//乘性操作符，操作数会被Number()
//和C语言一样，有乘、除、取余（*、/、%）
//运算时注意Infinity和NaN以及0




//指数操作符（**）
//和Math.pow()一样
console.log(Math.pow(3,2)==3**2);//true




//加性操作符
//加性操作符再后台会发生数据类型的转换

//加法操作符
//有字符串则变成字符串拼接，遇到非数值调用String()变成字符串

//减法操作符
//非数值调用Number()转换，对象则调用valueOf()或toString()转换




//关系操作符，返回布尔值
//涉及到NaN的比较都返回false
//一方是数值，则另一方转换为数值
//双方都是字符串，则逐个比对字符的编码大小
//布尔值转换为数值
//对象则使用valueOf()或者toString()




//相等操作符

//等于和不等于，会强制类型转换
//布尔值转换为数值
//字符串和数值比较，字符串试图转化为数值
//对象和其它比较，用valueOf()获取对象原始值比较
//null == undefined
//涉及NaN的则，相等操作返回false，不相等操作返回true
//两个对象比较，则比较两个对象是否类相同

//全等和不全等
//不会进行类型转换
//只有类型和值都相同才返回相等




//条件操作符
var a = 3 > 4 ? 3 : 4;
console.log(a);

//逗号操作符
//在一条语句中执行多个操作
var a = 1, b = 2, c = 3;
var d = (0, 1, 2, 3, 4);//d = 4



